# File location: /docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  bot-db:
    image: postgres:15-alpine
    container_name: shit-bot-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: shitbot
      POSTGRES_USER: shitbot
      POSTGRES_PASSWORD: ${DB_PASSWORD:-shitbot123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema_fixed.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shitbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shit-network

  # S.H.I.T. Bot
  shit-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shit-telegram-bot
    restart: unless-stopped
    depends_on:
      bot-db:
        condition: service_healthy
    environment:
      # Telegram Bot
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_USERS: ${ADMIN_USERS:-}
      
      # Database
      DATABASE_URL: postgresql://shitbot:${DB_PASSWORD:-shitbot123}@bot-db:5432/shitbot
      USE_SQLITE: ${USE_SQLITE:-false}
      
      # Shibarium API
      SHIBARIUM_API_KEY: ${SHIBARIUM_API_KEY}
      SHIBARIUM_API_KEY2: ${SHIBARIUM_API_KEY2:-}
      
      # Ollama AI
      OLLAMA_HOST: ${OLLAMA_HOST:-host.docker.internal}
      OLLAMA_PORT: ${OLLAMA_PORT:-11434}
      
      # Features
      ENABLE_AI_CHAT: ${ENABLE_AI_CHAT:-true}
      ENABLE_TRACKER: ${ENABLE_TRACKER:-true}
      ENABLE_GAME: ${ENABLE_GAME:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Webhook (optional)
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-}
      
    volumes:
      # Persistent data
      - ./data:/app/data
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./backups:/app/backups
      
      # Config files (optional)
      - ./game_config.json:/app/data/game_config.json:ro
      
    ports:
      - "8000:8000"  # Health check endpoint
      
    networks:
      - shit-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: shit-bot-redis
    restart: unless-stopped
    profiles: ["cache"]
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - shit-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: shit-bot-nginx
    restart: unless-stopped
    profiles: ["production"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./exports:/usr/share/nginx/html/exports:ro
    depends_on:
      - shit-bot
    networks:
      - shit-network

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: shit-bot-prometheus
    profiles: ["monitoring"]
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - shit-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: shit-bot-grafana
    profiles: ["monitoring"]
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - shit-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shit-bot-pgadmin
    profiles: ["dev"]
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@shitbot.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - bot-db
    networks:
      - shit-network

  # Optional: Backup service
  backup:
    image: postgres:15-alpine
    container_name: shit-bot-backup
    profiles: ["backup"]
    environment:
      PGPASSWORD: ${DB_PASSWORD:-shitbot123}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - bot-db
    networks:
      - shit-network

networks:
  shit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local