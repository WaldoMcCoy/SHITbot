#!/usr/bin/env python3
"""
# File location: /main.py
S.H.I.T. Bot - Main Application
Integrates ShitAI, SHIT Tracker, and DopeWars into one Telegram bot
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, Optional

from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode

# Import handlers
from bot.handlers.menu_handler import MenuHandler
from bot.handlers.chat_handler import ChatHandler
from bot.handlers.tracker_handler import TrackerHandler
from bot.handlers.game_handler import GameHandler
from bot.utils.database import Database

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Suppress httpx logs
logging.getLogger("httpx").setLevel(logging.WARNING)


class ShitBot:
    """Main bot application"""
    
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            logger.error("BOT_TOKEN not found in environment variables!")
            sys.exit(1)
        
        # Initialize database
        self.db = Database()
        
        # Initialize application
        self.application = Application.builder().token(self.token).build()
        
        # Store handler instances
        self.handlers = {
            'menu': MenuHandler(self.db),
            'chat': ChatHandler(self.db),
            'tracker': TrackerHandler(self.db),
            'game': GameHandler(self.db)
        }
        
        # Store handlers in bot data for access
        self.application.bot_data['db'] = self.db
        self.application.bot_data['menu_handler'] = self.handlers['menu']
        self.application.bot_data['chat_handler'] = self.handlers['chat']
        self.application.bot_data['tracker_handler'] = self.handlers['tracker']
        self.application.bot_data['game_handler'] = self.handlers['game']

    async def setup(self):
        """Setup bot handlers and commands"""
        logger.info("Setting up S.H.I.T. Bot...")
        
        # Initialize database
        await self.db.initialize()
        
        # Setup handlers
        self._setup_handlers()
        
        # Setup bot commands
        await self._setup_bot_commands()
        
        logger.info("Bot setup completed!")

    def _setup_handlers(self):
        """Setup all command and callback handlers"""
        
        # Start command
        self.application.add_handler(
            CommandHandler('start', self._start_handler)
        )
        
        # Main menu command
        self.application.add_handler(
            CommandHandler('shit_menu', MenuHandler.show_main_menu_command)
        )
        
        # Help command
        self.application.add_handler(
            CommandHandler('shit_help', self._help_handler)
        )
        
        # Status command
        self.application.add_handler(
            CommandHandler('shit_status', self._status_handler)
        )
        
        # Cancel command
        self.application.add_handler(
            CommandHandler('shit_cancel', self._cancel_operation)
        )
        
        # AI Chat conversation handler
        self.application.add_handler(
            ChatHandler.get_conversation_handler()
        )
        
        # Tracker conversation handler
        self.application.add_handler(
            TrackerHandler.get_conversation_handler()
        )
        
        # Game conversation handler
        self.application.add_handler(
            GameHandler.get_conversation_handler()
        )
        
        # Main menu callbacks
        self.application.add_handler(
            CallbackQueryHandler(MenuHandler.handle_menu_callback, pattern="^(main_menu|shit_ai|shit_tracker|shit_game)$")
        )
        
        # Error handler
        self.application.add_error_handler(self._error_handler)
        
        # Admin handlers (if admin users are configured)
        admin_users = os.getenv('ADMIN_USERS', '').split(',')
        if admin_users and admin_users[0]:
            self.application.add_handler(
                CommandHandler('shit_admin', self._admin_handler, filters=filters.User(username=admin_users))
            )
        
        logger.info("All handlers registered successfully")

    async def _setup_bot_commands(self):
        """Setup bot command menu"""
        commands = [
            BotCommand("start", "üöÄ Start the bot"),
            BotCommand("shit_menu", "üìã Main menu"),
            BotCommand("shit_help", "‚ùì Show help"),
            BotCommand("shit_ai", "ü§ñ AI Chat"),
            BotCommand("shit_track", "üìä Track wallet transactions"),
            BotCommand("shit_game", "üéÆ Play DopeWars"),
            BotCommand("shit_scores", "üèÜ View leaderboard"),
            BotCommand("shit_status", "‚ÑπÔ∏è Bot status"),
            BotCommand("shit_cancel", "‚ùå Cancel current operation"),
        ]
        
        await self.application.bot.set_my_commands(commands)
        logger.info("Bot commands menu configured")

    async def _start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        
        # Save user to database
        await self.db.save_user(user.id, user.username, user.first_name)
        
        welcome_text = (
            f"üöÄ **Welcome to S.H.I.T. Bot, {user.first_name}!**\n\n"
            f"*Shibarium Historical Income Tracker*\n\n"
            f"I'm your comprehensive Shibarium assistant featuring:\n\n"
            f"ü§ñ **ShitAI** - AI-powered chat with multiple models\n"
            f"üìä **SHIT Tracker** - Complete transaction history & tax reports\n"
            f"üéÆ **DopeWars** - Crypto trading game with leaderboards\n\n"
            f"Use /shit_menu to explore all features or choose a command from the menu below.\n\n"
            f"_Made with ‚ù§Ô∏è for the Shib Army!_"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Show main menu
        return await MenuHandler.show_main_menu(update, context)

    async def _help_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /shit_help command"""
        help_text = (
            "üìö **S.H.I.T. Bot Help**\n\n"
            "**ü§ñ AI Chat Commands:**\n"
            "/shit_ai - Start AI conversation\n"
            "/shit_models - View available AI models\n"
            "/shit_model - Change AI model\n"
            "/shit_mode - Toggle response mode\n"
            "/shit_clear - Clear chat history\n\n"
            "**üìä Tracker Commands:**\n"
            "/shit_track - Start wallet tracking\n"
            "/shit_scan - Quick wallet scan\n"
            "/shit_history - View scan history\n\n"
            "**üéÆ Game Commands:**\n"
            "/shit_game - Game menu\n"
            "/shit_play - Start new game\n"
            "/shit_resume - Resume saved game\n"
            "/shit_scores - View leaderboard\n\n"
            "**üìã General Commands:**\n"
            "/shit_menu - Main menu\n"
            "/shit_status - Bot status\n"
            "/shit_cancel - Cancel operation\n"
            "/shit_help - This help message\n\n"
            "üí° *Tip: Use /shit_menu for easy navigation!*"
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )

    async def _status_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /shit_status command"""
        # Get system status
        bot_info = await self.application.bot.get_me()
        db_status = await self.db.check_connection()
        
        # Check Ollama status
        ollama_status = "‚ùå Offline"
        ollama_host = os.getenv('OLLAMA_HOST')
        if ollama_host:
            try:
                # Simple check - in production would do actual API call
                ollama_status = "‚úÖ Online"
            except:
                pass
        
        # Check API status
        api_status = "‚úÖ Configured" if os.getenv('SHIBARIUM_API_KEY') else "‚ùå Not configured"
        
        status_text = (
            "‚ÑπÔ∏è **S.H.I.T. Bot Status**\n\n"
            f"ü§ñ **Bot:** @{bot_info.username}\n"
            f"üìä **Version:** 1.0.2\n"
            f"üíæ **Database:** {'‚úÖ Connected' if db_status else '‚ùå Disconnected'}\n"
            f"üß† **Ollama AI:** {ollama_status}\n"
            f"üîó **Shibarium API:** {api_status}\n"
            f"‚è∞ **Uptime:** Online\n\n"
            f"_Last checked: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}_"
        )
        
        await update.message.reply_text(
            status_text,
            parse_mode=ParseMode.MARKDOWN
        )

    async def _cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel any ongoing operation"""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå *Operation Cancelled*\n\n"
            "All ongoing operations have been cancelled.\n"
            "Use /shit_menu to return to the main menu.",
            parse_mode=ParseMode.MARKDOWN
        )
        return await MenuHandler.show_main_menu(update, context)

    async def _admin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin commands"""
        if not context.args:
            admin_text = (
                "üë®‚Äçüíº **Admin Panel**\n\n"
                "Available commands:\n"
                "/shit_admin users - User statistics\n"
                "/shit_admin db - Database status\n"
                "/shit_admin games - Game statistics\n"
                "/shit_admin scans - Scan statistics\n"
                "/shit_admin drugs - Manage game items\n"
                "/shit_admin locations - Manage game locations\n"
                "/shit_admin competition - Manage competitions\n"
                "/shit_admin broadcast - Send announcement\n"
            )
            await update.message.reply_text(admin_text, parse_mode=ParseMode.MARKDOWN)
            return
        
        command = context.args[0].lower()
        
        if command == 'users':
            stats = await self.db.get_user_statistics()
            text = f"üë• **User Statistics**\n\n"
            text += f"Total Users: {stats.get('total_users', 0)}\n"
            text += f"Active Today: {stats.get('active_today', 0)}\n"
            text += f"Active This Week: {stats.get('active_week', 0)}\n"
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        
        elif command == 'db':
            # Database maintenance options
            text = "üíæ **Database Status**\n\n"
            # Add database stats
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        
        # Add more admin commands as needed

    async def _error_handler(self, update: object, context) -> None:
        """Global error handler"""
        try:
            logger.error(f"Exception while handling update: {context.error}", exc_info=context.error)
            
            if isinstance(update, Update) and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå *Error Occurred*\n\n"
                    "Something went wrong. Please try again or use /shit_menu to return to the main menu.\n\n"
                    "If the problem persists, contact the administrator.",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def run(self):
        """Run the bot"""
        try:
            # Setup
            await self.setup()
            
            logger.info("Starting S.H.I.T. Bot...")
            
            # Start polling
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
            logger.info("Bot is running! Press Ctrl+C to stop.")
            
            # Keep the bot running
            try:
                await asyncio.Event().wait()
            except KeyboardInterrupt:
                logger.info("Received interrupt signal, shutting down...")
            
        except Exception as e:
            logger.error(f"Fatal error: {e}")
            raise
        finally:
            # Cleanup
            logger.info("Stopping bot...")
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            await self.db.close()
            logger.info("Bot stopped successfully!")


async def main():
    """Main entry point"""
    bot = ShitBot()
    await bot.run()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        sys.exit(1)